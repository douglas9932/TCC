unit UConfVenda;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.DBCtrls, Vcl.StdCtrls, Vcl.Mask,
  Vcl.Buttons;

type
  TFConfVenda = class(TForm)
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    LBTroco: TLabel;
    DBComboBox1: TDBComboBox;
    DBText1: TDBText;
    EDValorRecebido: TEdit;
    BitBtn1: TBitBtn;
    BitBtn2: TBitBtn;
    procedure EDValorRecebidoExit(Sender: TObject);
    procedure BitBtn2Click(Sender: TObject);
    procedure BitBtn1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FConfVenda: TFConfVenda;

implementation

{$R *.dfm}

uses UDM;

procedure TFConfVenda.BitBtn1Click(Sender: TObject);
begin

    if DBComboBox1.Text='' then
    begin
    Showmessage ('Escolha o Tipo De Condição Da Venda');
    Abort;
    end
    else
    if (EDValorRecebido.Text='') or (EDValorRecebido.Text='0') then
    begin
    Showmessage('Informe o Valor Recebido');
    EDValorRecebido.SetFocus;
    Abort;
    end
    else

    if DM.TBVendaSTATUSVENDA.AsString='NÃO CONF' then
      With DM.TBItemVenda do
        begin
          First;
          While not EOF do
            begin;
              DM.TBProduto.Locate('IDPRODUTO',DM.TBItemVendaIDPRODUTO.AsInteger,
                []);
              if (DM.TBProdutoQUANTIDADE.AsFloat-
                  DM.TBItemVendaQUANTIDADE.AsFloat)<=0 Then
                begin
                  MessageDLG('Não há estoque suficiente para o produto'+#13
                    +DM.TBProdutoNOMEPRODUTO.AsString,
                  mtinformation,[mbok],0);
                  Abort;
                end;
              Next;
            end;
          end;

    with DM.TBItemVenda do
        begin
          First;
          While not EOF do
            begin
              DM.TBProduto.Locate('IDPRODUTO',DM.TBItemVendaIDPRODUTO.AsInteger,
                []);
              DM.TBProduto.Edit;
              DM.TBProdutoQUANTIDADE.AsFloat :=
                DM.TBProdutoQUANTIDADE.AsFloat -
                FieldByName('QUANTIDADE').AsFloat;

              DM.TBProduto.Post;

              Next;
            end;
          end;

    DM.TBProduto.Refresh;
    DM.TBVenda.Edit;
    DM.TBVendaSTATUSVENDA.AsString:= 'CONF';
    DM.TBVenda.Post;
    Close;

    //gera conta a receber
    DM.TBContasAReceber.Insert;
    DM.TBContasAReceberIDVENDA.AsInteger:=
    DM.TBVendaIDVENDA.AsInteger;
    DM.TBContasAReceberDATAVENDA.AsDateTime:=Date;
    DM.TBContasAReceberDESCRICAO.AsString:= 'Conta a Receber de Venda';
    DM.TBContasAReceberVALOR.AsFloat:=
    DM.TBVendatotalvenda.AsFloat;
    DM.TBContasAReceberHORA.AsDateTime:=Time;
    DM.TBContasAReceberSTATUSCONTASARECEBER.AsString:='CONF';
    DM.TBContasAReceberIDCLIENTE.AsInteger:=
    DM.TBVendaIDCLIENTE.AsInteger;
    DM.TBContasAReceberTIPO.AsString:= 'Venda';
    DM.TBContasAReceber.Post;
    Dm.TBContasAReceber.Refresh;

    //gera parcela conta a receber
    DM.TBParcelaContaAReceber.Insert;
    DM.TBParcelaContaAReceberIDCONTASARESCEBER.AsInteger:=
    DM.TBContasAReceberIDCONTASARESCEBER.AsInteger;
    DM.TBParcelaContaAReceberVALORPARCELAS.AsFloat:=
    DM.TBContasAReceberVALOR.AsFloat;
    DM.TBParcelaContaAReceberSTATUSPARCELASCONTASARECEBER.AsString:='PAGA';
    DM.TBParcelaContaAReceber.Post;
    DM.TBParcelaContaAReceber.Refresh;

    //gera o recebimento
    DM.TBRecebimento.Insert;
    DM.TBRecebimentoIDPARCELASCONTASARECEBER.AsInteger:=
    DM.TBParcelaContaAReceberIDPARCELASCONTASARECEBER.AsInteger;
    DM.TBRecebimentoDATARECEBIMENTO.AsDateTime:= DATE;
    DM.TBRecebimentoHORA.AsDateTime:= TIME;
    DM.TBRecebimentoVALORDACONTA.AsFloat:= DM.TBParcelaContaAReceberVALORPARCELAS.AsFloat;
    DM.TBRecebimentoVALORRECEBIMENTO.AsFloat:= DM.TBParcelaContaAReceberVALORPARCELAS.AsFloat;
    DM.TBRecebimento.Post;
    DM.TBRecebimento.Refresh;

    //gera caixa
    DM.TBCaixa.Insert;
    DM.TBCaixaIDRESCEBIMENTO.AsInteger := DM.TBRecebimentoIDRESCEBIMENTO.AsInteger;
    DM.TBCaixaVALORENTRADA.AsFloat:= DM.TBRecebimentoVALORDACONTA.AsFloat;
    DM.TBCaixaSALDO.AsFloat:=
    DM.TBCaixaVALORENTRADA.AsFloat + DM.TBCaixaSALDO.AsFloat;
    DM.TBCaixa.Post;
    DM.TBCaixa.Refresh;



end;

procedure TFConfVenda.BitBtn2Click(Sender: TObject);
begin

        DM.TBVenda.Cancel;
        Close;

end;

procedure TFConfVenda.EDValorRecebidoExit(Sender: TObject);
begin

    if StrtoFloat (EDValorRecebido.Text)>=
      StrtoFloat (DBText1.Caption)
    then

    {Begin
    LBTroco.Caption:= FloattoStr
    (StrtoFloat (EDValorRecebido.Text)-
    StrtoFloat (DBText1.Caption));

    End
    else
    Showmessage('O Valor Recebido Não Pode Ser Menor Que O Valor Total Da Venda') ;
     }

end;

procedure TFConfVenda.FormShow(Sender: TObject);
begin

    EDValorRecebido.Text:='0';
    LBTroco.Caption:='0';

end;

end.
